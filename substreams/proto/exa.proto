syntax = "proto3";

package exa;

message Events {
  repeated AccumulatorAccrual accumulator_accruals = 1;
  repeated Borrow borrows = 2;
  repeated BorrowAtMaturity borrow_at_maturities = 3;
  repeated CollectorSet collector_sets = 4;
  repeated DelaySet delay_sets = 5;
  repeated EarningsAccumulatorSmoothFactorSet earnings_accumulator_smooth_factor_sets = 6;
  repeated ExaAccountInitialized exa_account_initialized = 7;
  repeated FixedEarningsUpdate fixed_earnings_updates = 8;
  repeated FlashLoanerSet flash_loaner_sets = 9;
  repeated FloatingDebtUpdate floating_debt_updates = 10;
  repeated InterestRateModelSet interest_rate_model_sets = 11;
  repeated MarketEntered market_enters = 12;
  repeated MarketExited market_exits = 13;
  repeated MarketUpdate market_updates = 14;
  repeated MaxFuturePoolsSet max_future_pools_sets = 15;
  repeated PluginAllowed plugin_allowed = 16;
  repeated ProposalManagerSet proposal_manager_sets = 17;
  repeated ProposalNonceSet proposal_nonce_sets = 18;
  repeated Proposed proposed = 19;
  repeated Repay repays = 20;
  repeated RepayAtMaturity repay_at_maturities = 21;
  repeated SwapperSet swapper_sets = 22;
  repeated TargetAllowed target_allowed = 23;
  repeated Transfer transfers = 24;
  repeated TreasurySet treasury_sets = 25;

  // price tracking
  repeated AnswerUpdated answer_updates = 26;
  repeated NewRound new_rounds = 27;
  repeated NewTransmission new_transmissions = 28;

  message AccumulatorAccrual {
    bytes market = 1;
    // internals
    uint64 log_ordinal = 30;
  }

  message Borrow {
    bytes market = 1;
    bytes borrower = 2;
    string shares = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message BorrowAtMaturity {
    bytes market = 1;
    uint64 maturity = 2;
    bytes borrower = 3;
    string assets = 4;
    string fee = 5;
    // internals
    uint64 log_ordinal = 30;
  }

  message CollectorSet {
    bytes collector = 1;
    bytes account = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message DelaySet {
    uint64 delay = 1;
    // internals
    uint64 log_ordinal = 30;
  }

  message EarningsAccumulatorSmoothFactorSet {
    bytes market = 1;
    string earnings_accumulator_smooth_factor = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message ExaAccountInitialized {
    bytes address = 1;
    // internals
    uint64 log_ordinal = 30;
  }

  message FixedEarningsUpdate {
    bytes market = 1;
    uint64 maturity = 2;
    string unassigned_earnings = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message FlashLoanerSet {
    bytes flash_loaner = 1;
    bytes account = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message FloatingDebtUpdate {
    bytes market = 1;
    string utilization = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message InterestRateModelSet {
    bytes market = 1;
    bytes interest_rate_model = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message MarketEntered {
    bytes market = 1;
    bytes account = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message MarketExited {
    bytes market = 1;
    bytes account = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message MarketUpdate {
    bytes market = 1;
    string floating_deposit_shares = 2;
    string floating_assets = 3;
    string floating_borrow_shares = 4;
    string floating_debt = 5;
    string earnings_accumulator = 6;
    // internals
    uint64 log_ordinal = 30;
  }

  message MaxFuturePoolsSet {
    bytes market = 1;
    uint64 max_future_pools = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message PluginAllowed {
    bytes plugin = 1;
    bytes sender = 2;
    bool allowed = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message ProposalManagerSet {
    bytes proposal_manager = 1;
    bytes account = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message ProposalNonceSet {
    bytes account = 1;
    uint64 nonce = 2;
    bool executed = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message Proposed {
    bytes account = 1;
    uint64 nonce = 2;
    bytes market = 3;
    uint64 proposal_type = 4;
    uint64 amount = 5;
    bytes data = 6;
    uint64 unlock = 7;
    // internals
    uint64 log_ordinal = 30;
  }

  message Repay {
    bytes market = 1;
    bytes borrower = 2;
    string shares = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message RepayAtMaturity {
    bytes market = 1;
    uint64 maturity = 2;
    bytes borrower = 3;
    string assets = 4;
    string position_assets = 5;
    // internals
    uint64 log_ordinal = 30;
  }

  message SwapperSet {
    bytes swapper = 1;
    bytes sender = 2;
    // internals
    uint64 log_ordinal = 30;
  }

  message TargetAllowed {
    bytes target = 1;
    bytes sender = 2;
    bool allowed = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  message Transfer {
    bytes token = 1;
    bytes from = 2;
    bytes to = 3;
    string amount = 4;
    // internals
    uint64 log_ordinal = 30;
  }

  message TreasurySet {
    bytes market = 1;
    bytes treasury = 2;
    string treasury_fee_rate = 3;
    // internals
    uint64 log_ordinal = 30;
  }

  // price tracking

  message AnswerUpdated {
    bytes oracle = 1;
    string current = 2;
    uint64 round_id = 3;
    uint64 timestamp = 4;
    // internals
    uint64 log_ordinal = 30;
  }

  message NewRound {
    bytes oracle = 1;
    uint64 round_id = 2;
    bytes started_by = 3;
    uint64 started_at = 4;
    // internals
    uint64 log_ordinal = 30;
  }

  message NewTransmission {
    bytes oracle = 1;
    uint64 aggregator_round_id = 2;
    string answer = 3;
    bytes transmitter = 4;
    repeated string observations = 5;
    bytes observers = 6;
    bytes raw_report_context = 7;
    // internals
    uint64 log_ordinal = 30;
  }
}
