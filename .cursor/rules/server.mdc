---
description: 
globs: server/**
alwaysApply: false
---
# server style guide

this guide provides the specific style rules and best practices for the exa backend server, built with hono, node.js, drizzle orm, and postgresql. it complements the global `style.mdc`.

## api design (hono)

- **routes as functions**: treat each route as a self-contained function. all logic for a route should be defined within its handler.
- **`c.var` for context**: use the `c.var` object to pass strongly-typed data between middleware and route handlers (e.g., authenticated user session). do not use `c.set`.
- **validation with middleware**: all request validation (headers, body, params) must be handled by the `@hono/valibot-validator` middleware. do not perform manual validation inside route handlers.
- **openapi generation**: all routes must have a `.doc()` call that defines their `openapi` specification. this is not optional; it is essential for automated documentation and client generation.
- **error handling**: use `hono`'s built-in error handling. throw `new HTTPException()` for expected errors (e.g., `404 not found`). unhandled errors will be caught and logged automatically.

## linting

the server's code is strictly enforced by a dedicated eslint configuration that builds upon the global rules. key enforcements include:

- **`plugin:n/recommended`**: enforces a wide range of best practices for node.js development.
- **`plugin:drizzle/all`**: ensures all database queries adhere to drizzle orm best practices, such as requiring `where` clauses for `update` and `delete` operations to prevent accidental data loss.

## database (drizzle orm)

- **schema-first**: the database schema is defined in `server/database/schema.ts`. this is the single source of truth for the database structure.
- **migrations**: all schema changes must be accompanied by a migration file generated by `drizzle-kit`. run `pnpm --filter server db:push` to generate migrations. never edit the database schema manually.
- **query syntax**: use the `drizzle orm` query builder for all database interactions. do not write raw sql queries unless it is absolutely unavoidable.
- **relations**: define relations explicitly in the schema file. this enables `drizzle` to generate typed query results that include related entities.
- **database client**: the database client (`db`) should be passed via `hono`'s context (`c.var.db`), not imported directly into route handlers.

## authentication & authorization

- **middleware-driven**: all authentication and authorization logic must be implemented in `hono` middleware.
- **session data**: the authenticated user's session data is retrieved from the auth middleware and passed to route handlers via `c.var.user`. routes that require authentication should not have to know how the user was authenticated.
- **passkeys first**: the primary authentication mechanism is webauthn/passkeys.

## code structure

- **api routes**: all api route definitions are located in `server/api/`. use `index.ts` to group related routes into a single `hono` app instance, which is then mounted in the main `server/index.ts`.
- **hooks**: `server/hooks/` contains logic for responding to external events (e.g., blockchain events, third-party webhooks).
- **utils**: `server/utils/` contains shared utility functions. keep these small, pure, and well-defined.

## prohibited patterns

- **fat route handlers**: route handlers should be lean. they are responsible for orchestrating calls to services, not for implementing business logic. extract complex logic into utility or service functions.
- **direct database access in routes**: never instantiate or directly access a database client from within a route handler. it must be provided via context.
- **environment variable sprinkling**: do not access `process.env` directly in application code. all configuration and secrets should be loaded once at startup and passed down through dependency injection or context.
- **blocking the event loop**: avoid long-running, synchronous operations. use `async/await` correctly and be mindful of cpu-intensive tasks.
